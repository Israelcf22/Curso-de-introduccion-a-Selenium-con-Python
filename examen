1. ¿Con qué me permite interactuar la clase WebElement de Selenium? Con el navegador mismo: elementos a la vista, checkbox, textbox, dropdown y radiobutton
2. ¿Qué hace el siguiente código?

account = WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, “ACCOUNT”)))
account.click() Espera hasta 10 segundos a que sea visible el elemento que incluye el texto 'ACOUNT' en su link y despues hace click en el
3. ¿Cuáles son consideraciones al presentar una prueba técnica? Tener claro los pasos a seguir y pensar como el usuario final
4. ¿Cómo valido que el botón con nombre "signup" está a la vista y habilitado? signup_button = driver.find_element_by_name('signup')
self.assertTrue(signup_button.is_displayed() and signup_button.is_enabled())
5. Los métodos setUp() y tearDown() son para: Realizar acciones especificas antes y despúes de los casos de prueba
6. ¿Qué hace el siguiente código?

driver.implicitly_wait(20) Selenium espera hasta 20 segundos a que cargue algun elemento para continuar
7. ¿Qué es una expected condition (condición esperada)? Condiciones predefinidas o personalizadas a las que el script spera se cumplan antes de continuar X Unicamente condiciones predefinidas a las que el script espera se cumplan antes de continuar X Condiciones predefinidas o personalizadas para definir errores en el script
8. ¿Qué es Selenium? Una suite de software para automatizar el navegador
9. ¿Qué assertion te permite validar el que el título del sitio web es el siguiente?
🚀Platzi: ‎Cursos Online Profesionales de Tecnología self.assertEqual('🚀Platzi: ‎Cursos Online Profesionales de Tecnología', self.driver.title) 
10. ¿Con qué me permite interactuar la clase WebDriver de Selenium? Con el navegador mismo: su ventana, alerts, pop-ups y navegacion
11. ¿Cuáles son los componentes vigentes de la suite de Selenium? Selenium WebDriver, selenium IDE y Selenium GRID
12. ¿Cuándo es conveniente utilizar try y except en nuestra prueba? Cuando no conocemos como funciona el sitio por debajo y/otrabajamos con contenido dinamico
13. ¿Qué acciones podemos utilizar para interactuar con un alert de JavaScript? Aceptar, rechzar y enviar texto
14. ¿Por qué debemos utilizar la menor cantidad de esperas implícitas posibles? Por que la suma de los tiempos hace que la prueba sea mucho mas lenta
15. ¿Por qué no debería automatizar o hacer testing en sitios que explícitamente lo prohíben? Por respeto a su autor y como parte de la etica profesional
16. Son debilidades de Selenium: manejo de asincronismo y generacion de reportes
17. Tienes una barra de búsqueda cuyo nombre es name="q" ¿Con qué código accedes a esta? driver.find_element_by_name("q")
18. ¿Qué hace el siguiente código?

username.send_keys('user123') username.send_keys(KEYS.ENTER) Introduce el texto 'user123' en el elemento de la variable 'username' y después "presiona" la tecla "ENTER"
19. ¿Qué hace el siguiente código?
select_amount = Select(driver.find_element_by_name('amount')) select_amount.select_by_value('3') Busca al elemento con nombre 'amount' y selecciona la opcion cuyo valor sea igual a "3"
20. Son todos métodos para automatizar la navegación: back(), forward(), refresh(), close() , quit()
21. ¿Qué librerías complementan Selenium para generar pruebas efectivas? Unittest, PyUnitReport, DDT
22. ¿Cuál es la diferencia entre DDT y TDD? DDT es testing basado en codigo escrito. TDD es codigo basado en pruebas para pasarlas positivamente
23. ¿Qué es y para qué nos sirven las test suites? Una coleccion de tests que permiten validar el comportamiento en conjunto e las mismas
24. ¿Qué lenguaje no es soportado oficialmente con Selenium?  Dart
25. ¿Cuál es el principal beneficio de Page Object Model (POM)? permite un mejor mantenimiento de las pruebas a largo plazo y facilita su legibilidad
26. ¿Cuándo es buena idea usar XPath como selector? Cuando no hay otro selector unico para inteeractuar con el elemento
27. ¿Cómo extraemos el valor del atributo ‘autocomplete’ del siguiente elemento?

<input type="search"name="search" placeholder="Search Wikipedia" title="Search Wikipedia [ctrl-option-f]" accesskey="f"id="searchInput" autocomplete="off">  search_bar = driver.find_element_by_name('search') search_bar.get_attribute('autocomplete')

